package atari;

import gamelibs.multiplayer.MultiPlayerGame;
import gamelibs.multiplayer.GameInfo;
import easeljs.display.DOMElement;

@:native ("GameShell")
extern class GameShell {

/**
 * The GameShell initializes the creation of a game instance. The shell is responsible for:
 * <ul>
 *     <li>Loading the game list manifest</li>
 *     <li>Loading the individual game manifest</li>
 *     <li>Creating the container &lt;iframe&gt;</li>
 * </ul>
 * @class GameShell
 */


/**
* The content window of the iframe instance
* @property window
* @type HTMLDOMWindow
* @static
* @protected
*/
public static var window:DOMElement; // The document window for games

/**
 * The content body of the iframe instance
 * @property body
 * @type HTMLDOMBody
 * @static
 * @protected
 */
public static var body:DOMElement; // The document body for game

/**
 * The iframe instance that the game is loaded into
 * @property frame
 * @type HTMLIframeElement
 * @static
 * @protected
 */
public static var frame:DOMElement; // The game iframe

/**
 * The template path that will be loaded into an iframe, which bootstraps the game.
 * @property templatePath
 * @type {String}
 */
public static var templatePath:String;

public static var gameId = null;
public static var baseUrl = null;

//TODO: Docs
public static var manifest = null; // All games manifest
public static var currentGameManifest = null; // The manifest for the current game

public static var gameInfo = null;
public static var gameRoom = null;

public static var mediator = null;

public static var multiPlayerGame = null;

public static var muted = false;
public static var audioDisabled = false;

/**
 * The game is ready to play. This provides the site/framework an opportunity
 * to do something before calling <b>startGame</b>, such as show a pre-roll ad.
 * @event gameReady
 * @protected
 */
public static var onGameReady = null;

/**
 * The game has dispatched an event using pre-defined set of callbacks.
 * @event onGameEvent
 */
public static var onGameEvent = null;

public static var defaultManifest = null;

/**
 * The game is currently preloading.
 * @event onGameProgress
 * @param {Object} event An event object generated by PreloadJS.
 */
public static var onGameProgress = null;

public function new (baseUrl:String):Void;
public static function initialize (baseUrl:String):Void;


/**
 * Clean up the old game instance. This clears references out so that garbage collection
 * can clear the game reference.
 * @method cleanUp
 */
	public function cleanUp ():Void;

/**
 * Commands from the GameMediator fire this handler, unless another class overrides the gameReady() handler.
 * NOTE: THIS METHOD WILL DISAPPEAR OR BE OVERRIDDEN
 * @method gameEvent
 * @param eventName
 * @param args
 * @private
 */
	public function gameEvent (eventName:Dynamic, args:Dynamic):Void;


/**
 * Initialize the game.
 * @method initializeGame
 * @param {GameInfo} gameInfo GameInfo containing the game details
 * @param {MultiPlayerGame} mpg The current multiplayer game.
 */
	public function initializeGame (gameInfo:GameInfo, mpg:MultiPlayerGame):Void;

/**
 * The site has been toggled. Usually when a tab changes. The site is responsible for this.
 * @method toggleVisibility
 * @param {Boolean} visible If the site is visible or not
 */
	public function toggleVisibility (visible:Bool):Void;

/**
 * Create a game instance. This creates the container IFRAME, and initiates the
 * template injection.
 * @method createGame
 * @param {DOMElement} Where on the document should the the iFrame should be placed.
 * @static
 */
	public static function createGame (Where:DOMElement):Void;

/**
 * Kills a game. The framework/site uses this to kill a game, for example if too many players drop off from multiplayer.
 * @method destroyGame
 * @static
 */
	public static function destroyGame ():Void;

/**
 * The game list is loaded.
 * @method handleGameList
 * @param event
 * @static
 * @protected
 */
public static function handleGameList (event:Dynamic):Void;

/**
 * The individual game manifest has loaded. Load all start screen assets, and
 * complete setup.
 * @method handleGameManifest
 * @param {Object} event
 * @protected
 * @static
 */
	public static function handleGameManifest (event:Dynamic):Void;


/**
 * The game has received progress events from the GameMediator, meaning the
 * game is preloading.
 * @method handleGameProgress
 * @param {Object} event A progress event from PreloadJS
 * @protected
 * @static
 */
	public static function handleGameProgress (event:Dynamic):Void;


/**
 * The game is ready to be started. All assets are preloaded, and the site can
 * start it when ready.
 * @method handleGameReady
 * @static
 * @protected
 */
	public static function handleGameReady ():Void;

/**
 * Inject the loaded game manifest data into the current HTML template.
 * @method injectTemplate
 * @static
 * @protected
 */
	public static function injectTemplate ():Void;

/**
 * Utility method to load a file, and automatically scope the methods.
 * @method loadFile
 * @param {String} path The path to load
 * @param {Function} fileHandler The method to call when each file loads
 * @param {Function} completeHandler The method to call when complete
 * @static
 * @protected
 */
	public static function loadFile (path:String, fileHandler:Dynamic, completeHandler:Dynamic):Void;

/**
 * Register the GameMediator that will marshal communication between the game shell
 * and the game instance. The mediator enables:
 * <ol>
 *     <li>The GameShell to call methods on to the game instance (pause, reset, etc)</li>
 *     <li>The game instance to make callbacks on the GameShell (levelComplete, gameComplete, etc)</li>
 * </ol>
 * @method registerMediator
 * @param {GameMediator} mediator The GameMediator instance for the current game.
 * @static
 */
	public static function registerMediator (mediator:GameMediator):Void;

/**
 * A player has been disconnected from multiplayer, remove them from the game.
 * @method removePlayer
 * @static
 */
	public static function removePlayer ():Void;

/**
	 * Mute the entire framework. This ensures the games are also muted.
	 * @method setMute
	 * @param {Boolean} muted Whether the system should be muted or not.
	 * @static
	 */
	public static function setMute (muted:Bool):Void;

/**
 * Setup a game instance. This method downloads the manifest, and preloads any
 * assets needed to display the "start screen". Once complete, the <b>onGameSetup</b>
 * callback is fired.
 * @method setupGame
 * @param {String} gameId The id of the game, specified in the game manifest.
 * @static
 */
	public static function setupGame (gameId:String):Void;

/**
 * Start playing the game. The framework/site uses this to begin gameplay
 * on a game that is finished preloading and/or ready for multiplayer gameplay.
 * @method startGame
 * @static
 */
	public static function startGame ():Void;

/**
 * The HTML template has loaded. This only happens once, and the template is cached.
 * @method templateLoaded
 * @param {Object} event
 * @static
 * @protected
 */
	public static function templateLoaded (event:Dynamic):Void;

/**
 * Key events caught by the framework are passed into the active game, so that focus never has to be
 * set back on the iframe instance.
 * @method throttleEvent
 * @param {Object} event The event object generated by the key press/release.
 * @protected
 * @static
 */
	public static function throttleEvent (event:Dynamic):Void;

}